import os
import google.generativeai as genai
from dotenv import load_dotenv 
from typing import List, Dict

# Load bi·∫øn m√¥i tr∆∞·ªùng NGAY t·∫°i ƒë√¢y
load_dotenv()

# --- C·∫•u h√¨nh AI Model ---
try:
    # L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c load ·ªü main.py
    GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")
    print(f"üîç Debug - API Key loaded: {GEMINI_API_KEY[:10] if GEMINI_API_KEY else 'NONE'}...")  # Ch·ªâ in 10 k√Ω t·ª± ƒë·∫ßu
    
    if not GEMINI_API_KEY:
        raise ValueError("L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
        
    # Thi·∫øt l·∫≠p API key cho th∆∞ vi·ªán c·ªßa Google
    genai.configure(api_key=GEMINI_API_KEY)
    
    # Kh·ªüi t·∫°o model AI. S·ª≠ d·ª•ng 'gemini-1.5-flash' (model m·ªõi nh·∫•t v√† nhanh)
    # C·∫•u h√¨nh an to√†n ƒë·ªÉ tr√°nh c√°c n·ªôi dung kh√¥ng ph√π h·ª£p
    safety_settings = [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    ]
    model = genai.GenerativeModel('gemini-2.0-flash', safety_settings=safety_settings)
    print("‚úÖ  Gemini 2.0 Flash model ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh v√† s·∫µn s√†ng ho·∫°t ƒë·ªông.")

except Exception as e:
    print(f" L·ªói nghi√™m tr·ªçng khi c·∫•u h√¨nh Gemini: {e}")
    model = None # ƒê·∫∑t model l√† None n·∫øu c√≥ l·ªói

# --- H√†m ch·ª©c nƒÉng ---
def explain_code_from_gemini(code_snippet: str) -> dict:
    """
    G·ª≠i m·ªôt ƒëo·∫°n code ƒë·∫øn Gemini v√† y√™u c·∫ßu gi·∫£i th√≠ch.

    Args:
        code_snippet: ƒêo·∫°n m√£ ngu·ªìn c·∫ßn ƒë∆∞·ª£c gi·∫£i th√≠ch.

    Returns:
        M·ªôt dictionary ch·ª©a k·∫øt qu·∫£ ho·∫∑c th√¥ng b√°o l·ªói.
    """
    if not model:
        return {"error": "M√¥ h√¨nh AI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng."}

    # ƒê√¢y l√† "c√¢u l·ªánh" (prompt) ch√∫ng ta ra l·ªánh cho AI
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia l·∫≠p tr√¨nh v√† l√† m·ªôt ng∆∞·ªùi h∆∞·ªõng d·∫´n gi·ªèi. 
    H√£y ph√¢n t√≠ch v√† gi·∫£i th√≠ch ƒëo·∫°n code sau ƒë√¢y m·ªôt c√°ch chi ti·∫øt, r√µ r√†ng v√† d·ªÖ hi·ªÉu cho ng∆∞·ªùi m·ªõi h·ªçc.
    
    Y√™u c·∫ßu gi·∫£i th√≠ch:
    1.  **M·ª•c ƒë√≠ch ch√≠nh:** ƒêo·∫°n code n√†y l√†m g√¨?
    2.  **Gi·∫£i th√≠ch t·ª´ng d√≤ng:** Ph√¢n t√≠ch logic c·ªßa c√°c d√≤ng ho·∫∑c kh·ªëi l·ªánh quan tr·ªçng.
    3.  **G·ª£i √Ω c·∫£i ti·∫øn (n·∫øu c√≥):** C√≥ c√°ch n√†o ƒë·ªÉ vi·∫øt code n√†y t·ªët h∆°n, s·∫°ch h∆°n, ho·∫∑c hi·ªáu qu·∫£ h∆°n kh√¥ng?

    ƒê√¢y l√† ƒëo·∫°n code c·∫ßn ph√¢n t√≠ch:
    ```
    {code_snippet}
    ```
    """
    
    try:
        # G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini
        response = model.generate_content(prompt)
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return {"explanation": response.text}
    except Exception as e:
        # X·ª≠ l√Ω n·∫øu c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh g·ªçi API
        print(f" L·ªói khi g·ªçi Gemini API: {e}")
        return {"error": f"ƒê√£ x·∫£y ra l·ªói khi giao ti·∫øp v·ªõi AI: {e}"}
    
def generate_chat_response(history: List[Dict[str, any]], message: str) -> dict:
    """
    T·∫°o ph·∫£n h·ªìi t·ª´ AI d·ª±a tr√™n l·ªãch s·ª≠ tr√≤ chuy·ªán v√† tin nh·∫Øn m·ªõi.

    Args:
        history: L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥.
        message: Tin nh·∫Øn m·ªõi t·ª´ ng∆∞·ªùi d√πng.

    Returns:
        M·ªôt dictionary ch·ª©a ph·∫£n h·ªìi c·ªßa AI ho·∫∑c th√¥ng b√°o l·ªói.
    """
    if not model:
        return {"error": "M√¥ h√¨nh AI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng."}

    try:
        # Kh·ªüi t·∫°o m·ªôt phi√™n tr√≤ chuy·ªán (chat session) v·ªõi l·ªãch s·ª≠ ƒë√£ c√≥
        chat_session = model.start_chat(history=history)
        
        # G·ª≠i tin nh·∫Øn m·ªõi c·ªßa ng∆∞·ªùi d√πng v√†o phi√™n tr√≤ chuy·ªán
        response = chat_session.send_message(message)
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return {"role": "model", "parts": [response.text]}

    except Exception as e:
        print(f" L·ªói khi g·ªçi Gemini API trong chat session: {e}")
        return {"error": f"ƒê√£ x·∫£y ra l·ªói khi giao ti·∫øp v·ªõi AI: {e}"}